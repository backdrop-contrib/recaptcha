<?php

/**
 * @file
 * Tests for reCAPTCHA module.
 */

class ReCaptchaBasicTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => t('reCAPTCHA basic tests'),
      'description' => t('Test basic functionality of reCAPTCHA module.'),
      'group' => t('reCAPTCHA'),
      'dependencies' => array('captcha'),
    );
  }

  function setUp() {
    parent::setUp('captcha', 'recaptcha');
    module_load_include('inc', 'captcha');

    // Create a normal user.
    $permissions = array(
      'access content',
      'create page content',
      'edit own page content',
    );
    $this->normal_user = $this->drupalCreateUser($permissions);

    // Create an admin user.
    $permissions += array(
      'administer CAPTCHA settings',
      'skip CAPTCHA',
      'administer permissions',
      'administer content types',
      'administer recaptcha',
    );
    $this->admin_user = $this->drupalCreateUser($permissions);
  }

  /**
   * Test access to the administration page.
   */
  function testReCaptchaAdminAccess() {
    $this->drupalLogin($this->admin_user);
    $this->drupalGet('admin/config/people/captcha/recaptcha');
    $this->assertNoText(t('Access denied'), 'Admin users should be able to access the reCAPTCHA admin page', 'reCAPTCHA');
    $this->drupalLogout();
  }

  /**
   * Test the reCAPTCHA settings form.
   */
  function testReCaptchaAdminSettingsForm() {
    $this->drupalLogin($this->admin_user);

    $site_key = $this->randomName(40);
    $secret_key = $this->randomName(40);

    // Check form validation.
    $edit['recaptcha_site_key'] = '';
    $edit['recaptcha_secret_key'] = '';
    $edit['recaptcha_tabindex'] = $this->randomName(2);
    $this->drupalPost('admin/config/people/captcha/recaptcha', $edit, 'Save configuration');

    $this->assertRaw(t('Site key field is required.'), '[testReCaptchaConfiguration]: Empty site key detected.');
    $this->assertRaw(t('Secret key field is required.'), '[testReCaptchaConfiguration]: Empty secret key detected.');
    $this->assertRaw(t('The tabindex must be an integer.'), '[testReCaptchaConfiguration]: Invalid value for tab index detected.');

    // Save form with valid values.
    $edit['recaptcha_site_key'] = $site_key;
    $edit['recaptcha_secret_key'] = $secret_key;
    $edit['recaptcha_tabindex'] = 0;
    $this->drupalPost('admin/config/people/captcha/recaptcha', $edit, 'Save configuration');

    $this->assertNoRaw(t('Site key field is required.'), '[testReCaptchaConfiguration]: Site key was not empty.');
    $this->assertNoRaw(t('Secret key field is required.'), '[testReCaptchaConfiguration]: Secret key was not empty.');
    $this->assertNoRaw(t('The tabindex must be an integer.'), '[testReCaptchaConfiguration]: Tab index had a valid input.');

    $this->drupalLogout();
  }

  /**
   * Testing the protection of the user login form.
   */
  function testReCaptchaOnLoginForm() {
    global $language;

    $site_key = variable_get('recaptcha_site_key', '');
    $grecaptcha = '<div class="g-recaptcha" data-sitekey"' . $site_key . '" data-theme="light" data-type="image"></div>';

    // Test if login works.
    $this->drupalLogin($this->normal_user);
    $this->drupalLogout();

    $this->drupalGet('user');
    $this->assertNoRaw($grecaptcha, '[testReCaptchaVisibility]: reCAPTCHA is not shown on form.');

    // Enable 'captcha/Math' CAPTCHA on login form.
    captcha_set_form_id_setting('user_login', 'captcha/Math');

    $this->drupalGet('user');
    $this->assertNoRaw($grecaptcha, '[testReCaptchaVisibility]: reCAPTCHA is not shown on form.');

    // Enable reCAPTCHA on login form.
    captcha_set_form_id_setting('user_login', 'recaptcha/reCAPTCHA');

    // Check if there is a CAPTCHA on the login form.
    $this->drupalGet('user');
    $this->assertRaw($grecaptcha, '[testReCaptchaVisibility]: reCAPTCHA is shown on form.');
    $this->assertRaw('<script src="https://www.google.com/recaptcha/api.js?hl=' . $language->language . '" async="async" defer="defer"></script>', '[testReCaptchaVisibility]: reCAPTCHA is shown on form.');

    // Test if the fallback url is properly build.
    variable_set('recaptcha_noscript', 1);
    $this->drupalGet('user');
    $this->assertRaw($grecaptcha . '</div><noscript>', '[testReCaptchaNoScriptVisibility]: NoScript for reCAPTCHA is shown on form.');
    $this->assertRaw('https://www.google.com/recaptcha/api/fallback?k=' . $site_key . '&amp;hl=' . $language->language, '[testReCaptchaNoScriptVisibility]: Fallback URL with IFRAME has been found.');

    // Try to log in, which should fail.
    $edit = array(
      'name' => $this->normal_user->name,
      'pass' => $this->normal_user->pass_raw,
      'captcha_response' => '?',
    );
    $this->drupalPost('user', $edit, t('Log in'));
    // Check for error message.
    $this->assertText(t('The answer you entered for the CAPTCHA was not correct.'), 'CAPTCHA should block user login form', 'CAPTCHA');

    // And make sure that user is not logged in: check for name and password fields on ?q=user
    $this->drupalGet('user');
    $this->assertField('name', t('Username field found.'), 'CAPTCHA');
    $this->assertField('pass', t('Password field found.'), 'CAPTCHA');
  }

}

<?php

/**
 * @file
 * Verifies if user is a human without necessity to solve a CAPTCHA.
 */

/**
 * Implements hook_theme().
 */
function recaptcha_theme() {
  return array(
    'recaptcha_widget_noscript' => array(
      'variables' => array(
        'widget' => NULL,
      ),
      'template' => 'recaptcha-widget-noscript',
    ),
  );
}

/**
* Implements hook_config_info().
*/
function recaptcha_config_info() {
  $prefixes['recaptcha.settings'] = array(
    'label' => t('reCAPTCHA'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_menu().
 */
function recaptcha_menu() {
  $items['admin/config/people/captcha/recaptcha'] = array(
    'title' => 'reCAPTCHA',
    'description' => 'Administer the Google No CAPTCHA reCAPTCHA web service.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('recaptcha_admin_settings'),
    'access arguments' => array('administer recaptcha'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'recaptcha.admin.inc',
    'weight' => 1,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function recaptcha_permission() {
  return array(
    'administer recaptcha' => array(
      'title' => t('Administer reCAPTCHA'),
      'description' => t('Administer reCAPTCHA settings'),
    ),
  );
}

/**
 * Implements hook_captcha().
 */
function recaptcha_captcha($op, $captcha_type = '') {
  global $language;
  $config = config('recaptcha.settings');

  switch ($op) {
    case 'list':
      return array('reCAPTCHA');

    case 'generate':
      $captcha = array();
      if ($captcha_type == 'reCAPTCHA') {
        $recaptcha_site_key = $config->get('site_key');
        $recaptcha_secret_key = $config->get('secret_key');

        if (!empty($recaptcha_site_key) && !empty($recaptcha_secret_key)) {
          // Build the reCAPTCHA captcha form if site_key and secret_key are
          // configured. Captcha requires TRUE to be returned in solution.
          $captcha['solution'] = TRUE;
          $captcha['captcha_validate'] = 'recaptcha_captcha_validation';
          $captcha['form']['captcha_response'] = array(
            '#type' => 'hidden',
            '#value' => 'Google no captcha',
          );

          $noscript = '';
          if ($config->get('noscript')) {
            $variables = array(
              'sitekey' => $recaptcha_site_key,
              'language' => $language->langcode,
            );
            $noscript = theme('recaptcha_widget_noscript', array('widget' => $variables));
          }

          $attributes = array(
            'class' => 'g-recaptcha',
            'data-sitekey' => $recaptcha_site_key,
            'data-theme' => $config->get('theme'),
            'data-type' => $config->get('type'),
            'data-size' => $config->get('size'),
            'data-tabindex' => $config->get('tabindex'),
          );
          // Filter out empty tabindex/size.
          $attributes = array_filter($attributes);

          $captcha['form']['recaptcha_widget'] = array(
            '#markup' => '<div' . backdrop_attributes($attributes) . '></div>',
            '#suffix' => $noscript,
          );

          // @todo: backdrop-issue 2877 Backdrop does not yet support "async"
          backdrop_add_js(
            url('https://www.google.com/recaptcha/api.js', array('query' => array('hl' => $language->langcode), 'absolute' => TRUE)),
            array(
              'defer' => TRUE,
              'attributes' => array('async' => 'async'),
              'type' => 'external',
              'cache' => FALSE
            )
          );
        }
        else {
          // Fallback to Math captcha as reCAPTCHA is not configured.
          $captcha = captcha_captcha('generate', 'Math');
        }
      }
      return $captcha;
  }
}

/**
 * CAPTCHA Callback; Validates the reCAPTCHA code.
 */
function recaptcha_captcha_validation($solution, $response, $element, $form_state) {

  //Load third-party reCaptcha library
  //plus our custom RequestMethod
  module_load_include('php', 'recaptcha', 'recaptcha-php/src/autoload');
  module_load_include('php', 'recaptcha', 'src/ReCaptcha/RequestMethod/BackdropPost');

  $recaptcha_secret_key = config_get('recaptcha.settings', 'secret_key');
  if (empty($_POST['g-recaptcha-response']) || empty($recaptcha_secret_key)) {
    return FALSE;
  }

  // Use backdrop_http_request() to circumvent all issues with the Google library.
  $recaptcha = new \ReCaptcha\ReCaptcha($recaptcha_secret_key, new \ReCaptcha\RequestMethod\BackdropPost());

  $resp = $recaptcha->verify(
    $_POST['g-recaptcha-response'],
    ip_address()
  );

  if ($resp->isSuccess()) {
    // Verified!
    return TRUE;
  }
  else {
    // Error code reference, https://developers.google.com/recaptcha/docs/verify
    $error_codes = array(
      'missing-input-secret' => t('The secret parameter is missing.'),
      'invalid-input-secret' => t('The secret parameter is invalid or malformed.'),
      'missing-input-response' => t('The response parameter is missing.'),
      'invalid-input-response' => t('The response parameter is invalid or malformed.'),
      'invalid-json' => t('The json response is invalid or malformed.'),
      'unknown' => t('Unknown error.'),
    );
    foreach ($resp->getErrorCodes() as $code) {
      if (!isset($error_codes[$code])) {
        $code = 'unknown';
      }
      watchdog('reCAPTCHA web service', '@error', array('@error' => $error_codes[$code]), WATCHDOG_ERROR);
    }
  }
  return FALSE;
}

/**
 * Process variables for recaptcha-widget-noscript.tpl.php.
 *
 * @see recaptcha-widget-noscript.tpl.php
 */
function template_preprocess_recaptcha_widget_noscript(&$variables) {
  $variables['sitekey']  = check_plain($variables['widget']['sitekey']);
  $variables['language'] = check_plain($variables['widget']['language']);
  $variables['url']      = check_url(url('https://www.google.com/recaptcha/api/fallback', array('query' => array('k' => $variables['widget']['sitekey'], 'hl' => $variables['widget']['language']), 'absolute' => TRUE)));
}
